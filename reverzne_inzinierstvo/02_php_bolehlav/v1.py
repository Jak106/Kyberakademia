import base64

def xor_decrypt(input_text, key):
    key_length = len(key)
    output = ""  
    if key_length < len(input_text):
        key = (key * ((len(input_text) // key_length) + 1))[:len(input_text)]
    
    for i in range(len(input_text)):
        output += chr(ord(input_text[i]) ^ ord(key[i]))
    
    return output

def extract_key():
    base_string = "svtdbrod51snadsjvh_sssnkq460edlmna2e6qwzrhs4dnhdc_sxxzd341c2cco"
    indices = [4, 12, 14, 28, 36, 43, 49, 54, 28, 58, 62, 54, 28]
    return "".join(base_string[i] for i in indices)

if __name__ == "__main__":
    str_reverse = lambda s: s[::-1]
    function_name = str_reverse("noitcnuf_etaerc")
    
    encrypted_data = "=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"
    
    key = extract_key()
    decoded_data = base64.b64decode(str_reverse(encrypted_data)).decode(errors='ignore')
    decrypted_data = xor_decrypt(decoded_data, "Il1II1Il1Il1II1l1IlIlIl1IIllIl")
    
    print(decrypted_data)